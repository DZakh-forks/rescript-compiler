// Generated by ReScript, PLEASE EDIT WITH CARE


let someString = "hello";

let createdDict = {
  name: "hello",
  age: "what",
  more: "stuff",
  otherStr: someString
};

let intDict = {
  one: 1,
  two: 2,
  three: 3
};

function inferDictByPattern(dict) {
  if (dict.one === 1 && dict.three === 3 && dict.four === 4) {
    dict["five"] = 5;
    return;
  }
  if (dict.two !== 1) {
    console.log("not one");
  } else {
    console.log("two");
  }
}

function constrainedAsDict(dict) {
  if (dict.one !== 1) {
    console.log("not one");
  } else {
    console.log("one");
  }
}

let PatternMatching = {
  inferDictByPattern: inferDictByPattern,
  constrainedAsDict: constrainedAsDict
};

let dict = {
  key1: false,
  key2: undefined
};

if (!("key1" in dict)) {
  throw {
    RE_EXN_ID: "Assert_failure",
    _1: [
      "DictTests.res",
      44,
      2
    ],
    Error: new Error()
  };
}

if (!("key2" in dict)) {
  throw {
    RE_EXN_ID: "Assert_failure",
    _1: [
      "DictTests.res",
      46,
      2
    ],
    Error: new Error()
  };
}

if ("key3" in dict !== false) {
  throw {
    RE_EXN_ID: "Assert_failure",
    _1: [
      "DictTests.res",
      48,
      2
    ],
    Error: new Error()
  };
}

if (Object.hasOwn(dict, "toString") !== false) {
  throw {
    RE_EXN_ID: "Assert_failure",
    _1: [
      "DictTests.res",
      50,
      2
    ],
    Error: new Error()
  };
}

if (!Object.hasOwn(dict, "key1")) {
  throw {
    RE_EXN_ID: "Assert_failure",
    _1: [
      "DictTests.res",
      52,
      2
    ],
    Error: new Error()
  };
}

if (typeof ("key1" in dict) !== "boolean") {
  throw {
    RE_EXN_ID: "Assert_failure",
    _1: [
      "DictTests.res",
      54,
      2
    ],
    Error: new Error()
  };
}

let DictHas = {
  dict: dict
};

let three = 3;

export {
  someString,
  createdDict,
  three,
  intDict,
  PatternMatching,
  DictHas,
}
/*  Not a pure module */
